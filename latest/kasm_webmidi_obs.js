// Rust code in Ableton Live! WebMIDI bridge
// - browser MIDI device detection and management, MPE (MIDI Polyphonic Expression) support
// - MIDI input/output handling, Note playback and sequencing, Real-time MIDI message processing

// Go build similar instruments like this using Kasm Rust WASM SDK here:
//     https://pyrmontbrewery.com/get_kasm
//     

// Version: 1.14.1

/*
 * Copyright (c) Pyrmont Brewery 2025
 * Author: Kevin Staunton-Lambert
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class KasmWebMIDI{constructor(t={}){this.options={enableMPE:!1!==t.enableMPE,logMIDI:!1!==t.logMIDI,autoConnect:!1!==t.autoConnect,...t},this.midiAccess=null,this.midiOutputs=[],this.midiInputs=[],this.currentMidiOutput=null,this.playbackTimeouts=[],this.isPlaying=!1,this.mpeChannels=new Map,this.callbacks={onNoteOn:null,onNoteOff:null,onControlChange:null,onPitchBend:null,onDeviceStateChange:null,onMIDIReady:null,onError:null},this.broadcastChannel=new BroadcastChannel("kasm"),this.broadcastChannel.onmessage=t=>{this.handleBroadcastMessage(t.data)},this.initialize()}async initialize(){var t;if(this.log("Initializing WebMIDI support..."),!navigator.requestMIDIAccess)return this.log(t="WebMIDI API not supported in this browser","warn"),this.triggerCallback("onError",{type:"unsupported",message:t}),!1;try{return this.log("Requesting MIDI access..."),this.midiAccess=await navigator.requestMIDIAccess({sysex:!1}),this.log("MIDI access granted successfully"),this.logMIDIDevices(),this.midiAccess.onstatechange=t=>{this.onMIDIStateChange(t),this.logMIDIDevices(),this.autoSelectSavedOutput&&this.autoSelectSavedOutput()},this.setupInputHandlers(),"function"==typeof this.retryEnumerateDevices&&this.retryEnumerateDevices(),this.log("MIDI system initialized successfully"),this.triggerCallback("onMIDIReady",{midiAccess:this.midiAccess}),!0}catch(t){return this.handleMIDIError(t),!1}}setupInputHandlers(){this.midiAccess&&this.midiAccess.inputs.forEach(t=>{this.setupInputMessageHandler(t)})}setupInputMessageHandler(e){e.onmidimessage=t=>{this.handleMIDIMessage(t,e.name,e.type)},this.log(`kasm: Message handler connected to INPUT device: "${e.name}"`)}handleMIDIMessage(t,e,s){var[i,t,a]=t.data,n=1+(15&i),o=240&i;if(i&&o){var l=void 0!==t?t:0,r=void 0!==a?a:0,h=(this.mpeChannels.has(n)||this.mpeChannels.set(n,{activeNotes:new Set,pitchBend:0,channelPressure:0,timbre:64,pressure:0}),this.mpeChannels.get(n));switch(this.logMIDIMessage(i,l,r,n,e,s,o),o){case 144:0<r?this.handleNoteOn(l,r,n,h):this.handleNoteOff(l,n,h);break;case 128:this.handleNoteOff(l,n,h);break;case 176:this.handleControlChange(l,r,n,h);break;case 224:this.handlePitchBend(l,r,n,h);break;case 208:this.handlePolyphonicAftertouch(l,r,n,h);break;case 192:this.log(`kasm: Program Change: ${l} - Channel: `+n);break;case 240:this.log("kasm: System message: 0x"+i.toString(16));break;default:this.log(`kasm: Other MIDI message: Type=0x${o.toString(16)}, Data1=${l}, Data2=${r} - Channel: `+n)}}}handleNoteOn(t,e,s,i){var a=this.getNoteName(t);this.log(`kasm: Note ON: ${a} (MIDI ${t}) - Velocity: ${e} - Channel: `+s),i.activeNotes.add(t),this.triggerCallback("onNoteOn",{pitch:t,velocity:e,channel:s,noteName:a,channelState:i})}handleNoteOff(t,e,s){var i=this.getNoteName(t);this.log(`kasm: Note OFF: ${i} (MIDI ${t}) - Channel: `+e),s.activeNotes.delete(t),this.triggerCallback("onNoteOff",{pitch:t,channel:e,noteName:i,channelState:s})}handleControlChange(t,e,s,i){this.log(`kasm: Control Change: CC${t} = ${e} - Channel: `+s),this.log("kasm: CC Name: "+this.getCCName(t)),74===t?(i.timbre=e,this.log(`kasm: MPE Timbre (Ch ${s}): `+e)):11===t&&(i.pressure=e,this.log(`kasm: MPE Pressure (Ch ${s}): `+e)),this.triggerCallback("onControlChange",{ccNumber:t,ccValue:e,channel:s,ccName:this.getCCName(t),channelState:i})}handlePitchBend(t,e,s,i){e=e<<7|t,t=e-8192;i.pitchBend=t,this.log(`kasm: Pitch Bend: ${e} (${0<t?"+":""}${t}) - Channel: `+s),this.triggerCallback("onPitchBend",{pitchBend:e,pitchBendCentered:t,channel:s,channelState:i})}handlePolyphonicAftertouch(t,e,s,i){var a=this.getNoteName(t);this.log(`kasm: Polyphonic Aftertouch: ${a} (MIDI ${t}) - Pressure: ${e} - Channel: `+s),0<(i.channelPressure=e)?this.handleNoteOn(t,e,s,i):this.handleNoteOff(t,s,i)}onMIDIStateChange(t){var t=t.port,e="input"===t.type,s=e?"INPUT":"OUTPUT";this.log(`kasm: MIDI device state change: ${s} "${t.name}" - State: `+t.state),"connected"===t.state?e&&this.setupInputMessageHandler(t):"disconnected"===t.state&&!e&&this.currentMidiOutput&&this.currentMidiOutput.id===t.id&&(this.currentMidiOutput=null,this.log("Current MIDI output device was disconnected")),this.updateDeviceLists(),this.triggerCallback("onDeviceStateChange",{port:t,isInput:e,deviceType:s})}updateDeviceLists(){this.midiAccess&&(this.midiInputs=Array.from(this.midiAccess.inputs.values()),this.midiOutputs=Array.from(this.midiAccess.outputs.values()),this.log(`kasm: Updated device lists: ${this.midiInputs.length} inputs, ${this.midiOutputs.length} outputs`),this.updateMidiDeviceDropdown())}updateMidiDeviceDropdown(){if("undefined"!=typeof document){let i=document.getElementById("midiOutputSelect");i?(i.innerHTML="",this.midiOutputs.forEach((t,e)=>{var s=document.createElement("option");s.value=t.id,s.text=t.name||"Output "+(e+1),i.appendChild(s)}),this.log("MIDI output dropdown updated","info")):this.log("No MIDI output dropdown found in DOM","warn")}}getOutputDevices(){return this.updateDeviceLists(),this.midiOutputs}getInputDevices(){return this.updateDeviceLists(),this.midiInputs}selectOutputDevice(t){return 0<=t&&t<this.midiOutputs.length&&(this.currentMidiOutput=this.midiOutputs[t],this.log(`kasm: Selected MIDI output device: "${this.currentMidiOutput.name}"`),!0)}sendNoteOn(t,e,s=0){return this.currentMidiOutput?(this.currentMidiOutput.send([144+s,t,e]),this.log(`kasm: Sent Note On: pitch=${t}, velocity=${e}, channel=`+s),!0):(this.log("No MIDI output device selected","warn"),!1)}sendNoteOff(t,e=0,s=64){return this.currentMidiOutput?(this.currentMidiOutput.send([128+e,t,s]),this.log(`kasm: Sent Note Off: pitch=${t}, channel=`+e),!0):(this.log("No MIDI output device selected","warn"),!1)}sendControlChange(t,e,s=0){return this.currentMidiOutput?(this.currentMidiOutput.send([176+s,t,e]),this.log(`kasm: Sent CC: CC${t}=${e}, channel=`+s),!0):(this.log("No MIDI output device selected","warn"),!1)}sendAllNotesOff(e=0){if(!this.currentMidiOutput)return!1;this.currentMidiOutput.send([176+e,123,0]);for(let t=0;t<=127;t++)this.sendNoteOff(t,e);return this.log("kasm: Sent All Notes Off for channel "+e),!0}playMidiClip(t,e={}){if(!this.currentMidiOutput)return this.log("No MIDI output device selected","warn"),!1;this.stopPlayback();let{tempo:s=120,channel:n=0,loop:i=!1}=e,o=60/s*1e3;this.isPlaying=!0,this.log(`kasm: Starting MIDI clip playback with ${t.length} notes`),t.forEach(e=>{if(1!==e.mute&&!(e.probability<1&&Math.random()>e.probability)){var s=e.start_time*o,i=e.duration*o;let t=e.velocity;0<e.velocity_deviation&&(a=(2*Math.random()-1)*e.velocity_deviation,t=Math.max(1,Math.min(127,Math.round(e.velocity+a))));var a=setTimeout(()=>{this.isPlaying&&this.sendNoteOn(e.pitch,t,n)},s),a=(this.playbackTimeouts.push(a),setTimeout(()=>{this.isPlaying&&this.sendNoteOff(e.pitch,n,e.release_velocity||64)},s+i));this.playbackTimeouts.push(a)}});var a=Math.max(...t.map(t=>t.start_time+t.duration))*o+1e3,a=setTimeout(()=>{i&&this.isPlaying?this.playMidiClip(t,e):this.stopPlayback()},a);return this.playbackTimeouts.push(a),!0}stopPlayback(){this.isPlaying=!1,this.playbackTimeouts.forEach(t=>clearTimeout(t)),this.playbackTimeouts=[],this.sendAllNotesOff(),this.log("Stopped MIDI playback")}setCallback(t,e){this.callbacks.hasOwnProperty(t)?(this.callbacks[t]=e,this.log("kasm: Set callback for "+t)):this.log("kasm: Unknown callback event: "+t,"warn")}triggerCallback(e,t){var s=this.callbacks[e];if("function"==typeof s)try{s(t)}catch(t){this.log(`kasm: Error in ${e} callback: `+t.message,"error")}}logMIDIDevices(){this.midiAccess&&(this.midiOutputs=Array.from(this.midiAccess.outputs.values()),this.midiInputs=Array.from(this.midiAccess.inputs.values()),this.log(`kasm: Found ${this.midiOutputs.length} MIDI OUTPUT device(s):`),this.midiOutputs.forEach((t,e)=>{this.log(`kasm:   ${e+1}. OUTPUT: "${t.name}" (${t.manufacturer||"Unknown"}) - `+t.state)}),this.log(`kasm: Found ${this.midiInputs.length} MIDI INPUT device(s):`),this.midiInputs.forEach((t,e)=>{this.log(`kasm:   ${e+1}. INPUT: "${t.name}" (${t.manufacturer||"Unknown"}) - `+t.state)}),"function"==typeof this.callbacks.onDeviceStateChange)&&this.callbacks.onDeviceStateChange({type:"deviceListChanged",outputs:this.midiOutputs,inputs:this.midiInputs})}async retryEnumerateDevices(t=10,e=300){let s=0;for(;s<t;){if(await new Promise(t=>setTimeout(t,e)),this.log("Retrying MIDI device enumeration..."),this.logMIDIDevices(),this.setupInputHandlers(),0<this.midiOutputs.length){this.autoSelectSavedOutput&&this.autoSelectSavedOutput();break}s++}}autoSelectSavedOutput(){try{let e=localStorage.getItem("selectedMidiOutput");var t;e&&0<this.midiOutputs.length&&(t=this.midiOutputs.find(t=>t.id===e||t.name===e))&&(this.currentMidiOutput=t,this.log("Auto-reconnected to MIDI output: "+t.name),this.triggerCallback("onDeviceStateChange",{type:"autoReconnect",output:t}))}catch(t){this.log("Failed to auto-select saved MIDI output","warn")}}logMIDIMessage(t,e,s,i,a,n,o){this.options.logMIDI&&(this.log(`kasm: MIDI message from ${n.toUpperCase()} "${a}":`),this.log(`kasm:   Raw data: [${t}, ${e}, ${s}] (0x${t.toString(16)}, 0x${e.toString(16)}, 0x${s.toString(16)})`),this.log(`kasm:   Channel: ${i} `+(this.options.enableMPE?"(MPE enabled)":"")),this.log("kasm:   Message type: 0x"+o.toString(16)))}handleMIDIError(t){let e="MIDI access failed";"SecurityError"===t.name?e="MIDI access blocked by security policy":"NotSupportedError"===t.name?e="MIDI not supported on this system":"InvalidStateError"===t.name?e="MIDI system in invalid state":"AbortError"===t.name&&(e="MIDI access request was aborted"),this.log(`kasm: MIDI Error: ${e} - `+t.message,"error"),this.triggerCallback("onError",{type:"initialization",message:e,originalError:t})}getNoteName(t){var e=Math.floor(t/12)-1;return""+["C","C#","D","Eb","E","F","F#","G","G#","A","Bb","B"][t%12]+e}getCCName(t){return{0:"Bank Select MSB",1:"Modulation Wheel",2:"Breath Controller",4:"Foot Controller",5:"Portamento Time",6:"Data Entry MSB",7:"Channel Volume",8:"Balance",10:"Pan",11:"Expression Controller",64:"Sustain Pedal",65:"Portamento On/Off",66:"Sostenuto",67:"Soft Pedal",74:"Timbre/Brightness",120:"All Sound Off",121:"Reset All Controllers",123:"All Notes Off"}[t]||"CC "+t}log(t,e="info"){switch(e){case"error":console.error("kasm: "+t);break;case"warn":console.warn("kasm: "+t);break;default:console.log("kasm: "+t)}}getStatus(){return{initialized:!!this.midiAccess,inputDevices:this.midiInputs.length,outputDevices:this.midiOutputs.length,currentOutput:this.currentMidiOutput?.name||null,isPlaying:this.isPlaying,mpeEnabled:this.options.enableMPE}}broadcastOSCMessage(t,e){this.broadcastChannel.postMessage({osc:t+" "+e})}handleBroadcastMessage(t){var e,s;t&&"string"==typeof t.osc&&3<=(s=t.osc.trim().split(/\s+/)).length&&"/kasm"===s[0]&&(e=s[1],s=s.slice(2).join(" "),this.log(`kasm_osc: Broadcast received: ${e} = `+s),t.broadcastOnly?this.log("kasm_osc: Broadcast only, not updating UI"):(t=document.getElementById(e))&&t.value&&(t.value=s,updateDial(e,s,!0)))}broadcastEmanatorValue(t="/kasm",e,s,i){t={osc:t+` ${e} `+s,broadcastOnly:i};console.log("kasm_osc: Broadcasting emanator OSC:",t),this.broadcastChannel?this.broadcastChannel.postMessage(t):localStorage.setItem("kasm_emanator_broadcast",JSON.stringify({value:s,ts:Date.now()}))}kasmOSC(t,e=!1,s="/kasm"){t&&!t._broadcastListener&&(console.log("kasm_osc: Setting up OSC listener for",s),t.addEventListener("change",()=>{this.broadcastEmanatorValue(s,t.id,t.value,e)}),t._broadcastListener=!0)}handleBroadcastAndUpdateDOM(t,e,s){!t||t.name!==e&&t.id!=="inlet_5_"+e||(t.value=s)}}"undefined"!=typeof module&&module.exports?module.exports=KasmWebMIDI:"undefined"!=typeof window&&(window.KasmWebMIDI=KasmWebMIDI);